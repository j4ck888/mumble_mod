# Copyright 2022 The Mumble Developers. All rights reserved.
# Use of this source code is governed by a BSD-style license
# that can be found in the LICENSE file at the root of the
# Mumble source tree or at <https://www.mumble.info/LICENSE>.

option(bundled-soci "Build the included version of SOCI instead of looking for one on the system" ON)

option(enable-sqlite "Whether or not to enable the SQLite database backend" ON)
option(enable-mysql "Whether or not to enable the MySQL database backend" ON)
option(enable-postgresql "Whether or not to enable the PostgreSQL database backend" ON)

add_library(mumble_database STATIC
	"Backend.cpp"
	"Column.cpp"
	"Constraint.cpp"
	"ConversionUtils.cpp"
	"DataType.cpp"
	"ForeignKey.cpp"
	"Database.cpp"
	"Index.cpp"
	"MetaTable.cpp"
	"MySQLConnectionParameter.cpp"
	"PostgreSQLConnectionParameter.cpp"
	"PrimaryKey.cpp"
	"SQLiteConnectionParameter.cpp"
	"Table.cpp"
	"TransactionHolder.cpp"
	"Trigger.cpp"
	"Utils.cpp"
	"Version.cpp"
)

target_include_directories(mumble_database PUBLIC "${CMAKE_SOURCE_DIR}/src")

if (NOT enable-sqlite)
	target_compile_definitions(mumble_database PUBLIC MUMBLE_DISABLE_SQLITE)
endif()
if (NOT enable-mysql)
	target_compile_definitions(mumble_database PUBLIC MUMBLE_DISABLE_MYSQL)
endif()
if (NOT enable-postgresql)
	target_compile_definitions(mumble_database PUBLIC MUMBLE_DISABLE_POSTGRESQL)
endif()

if (bundled-soci)
	# Include SOCI, but hard-code a few options
	set(SOCI_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/soci)

	set(SOCI_SHARED ON CACHE BOOL "" FORCE)
	set(SOCI_STATIC ON CACHE BOOL "" FORCE)
	set(SOCI_TESTS OFF CACHE BOOL "" FORCE)
	set(SOCI_LTO ${lto} CACHE BOOL "" FORCE)
	set(SOCI_DB2 OFF CACHE BOOL "" FORCE)
	set(SOCI_FIREBIRD OFF CACHE BOOL "" FORCE)
	set(SOCI_ODBC OFF CACHE BOOL "" FORCE)
	set(SOCI_ORACLE OFF CACHE BOOL "" FORCE)
	set(SOCI_EMPTY OFF CACHE BOOL "" FORCE)
	set(SOCI_MYSQL ${enable-mysql} CACHE BOOL "" FORCE)
	set(SOCI_POSTGRESQL ${enable-postgresql} CACHE BOOL "" FORCE)
	set(SOCI_SQLITE3 ${enable-sqlite} CACHE BOOL "" FORCE)

	add_subdirectory("${3RDPARTY_DIR}/soci" "${SOCI_BINARY_DIR}" EXCLUDE_FROM_ALL)

	disable_warnings_for_all_targets_in("${3RDPARTY_DIR}/soci")

	# SOCI's built include/ directory has to be added to the project explicitly.
	# This is needed so that SOCI can find the file soci/soci-config.h that gets generated by CMake.
	target_include_directories(mumble_database
		PUBLIC
			${SOCI_BINARY_DIR}/include
	)

	set(soci_components "")
	if (enable-sqlite)
		list(APPEND soci_components "soci_sqlite3_static")
	endif()
	if (enable-mysql)
		list(APPEND soci_components "soci_mysql_static")
	endif()
	if (enable-postgresql)
		list(APPEND soci_components "soci_postgresql_static")
	endif()
	# The core lib must be listed last
	list(APPEND soci_components "soci_core_static")
else()
	# Only Soci 4.1 introduces the general BLOB operations that we require
	set(components "")
	if (enable-sqlite)
		list(APPEND components "sqlite3")
	endif()
	if (enable-mysql)
		list(APPEND components "mysql")
	endif()
	if (enable-postgresql)
		list(APPEND components "postgresql")
	endif()

	find_pkg("Soci" 4.1.0 COMPONENTS ${components} core REQUIRED)

	set(soci_components "")
	if (enable-sqlite)
		list(APPEND soci_components "${Soci_sqlite3_PLUGIN}")
	endif()
	if (enable-mysql)
		list(APPEND soci_components "${Soci_mysql_PLUGIN}")
	endif()
	if (enable-postgresql)
		list(APPEND soci_components "${Soci_postgresql_PLUGIN}")
	endif()
	# The core lib must be listed last
	list(APPEND soci_components "${Soci_LIBRARY}")
endif()

target_link_libraries(mumble_database PUBLIC ${soci_components})

# Note that it is SOCI that requires the public Boost dependency, but unfortunately seems to fail to properly
# declare so and thus linking against SOCI does not reveal this Boost dependency to upstream dependends.
# Same happens for an indirect depenency on OpenSSL through (at least) the MySQL backend
find_pkg("Boost" REQUIRED)
find_pkg("OpenSSL" COMPONENTS SSL REQUIRED)
target_link_libraries(mumble_database PUBLIC Boost::boost OpenSSL::SSL)


if (NOT TARGET nlohmann_json)
	if(bundled-json)
		set(JSON_BuildTests OFF CACHE INTERNAL "")
		set(JSON_ImplicitConversions OFF CACHE INTERNAL "")
		add_subdirectory("${3RDPARTY_DIR}/nlohmann_json/" "${CMAKE_CURRENT_BINARY_DIR}/nlohmann_json/" EXCLUDE_FROM_ALL)
	else()
		find_pkg("nlohmann_json" REQUIRED)
	endif()
endif()

target_link_libraries(mumble_database PUBLIC nlohmann_json)
